{"version":3,"sources":["webpack:///./src/components/Search/SearchResults.tsx","webpack:///./src/pagecomponents/SearchPage/SearchPage.tsx","webpack:///./src/components/Post/PostPreview.tsx","webpack:///./src/components/Content/EmptyContent.tsx","webpack:///./src/components/Post/PostList.tsx"],"names":["SearchResults","props","searchChangedHandler","q","a","updateSearch","state","posts","cnt","finished","query","SearchService","registerHandler","this","setState","trim","postData","config","elasticSearchUri","_source","multi_match","fields","size","elasticSearchResultLimit","headers","Authorization","elsaticBasicAuth","res","hits","map","s","r","frontmatter","title","date","updatedate","image","subtitle","slug","author","categories","abstract","commentCnt","length","componentDidMount","undefined","window","o","getQueryObject","decodeURIComponent","componentWillUnmount","unregisterHandler","render","nestCategories","data","edges","e","node","authors","className","CategoryBar","PostList","React","Search","ContentLayout","header","url","description","type","tags","sidebar","SideBar","isFixed","SideBarQuickstart","SideBarHelp","SideBarCategories","Component","pageQuery","Page","pageContext","location","context","PostPreview","post","PostHeader","to","content","excerpt","EmptyContent","p","i","key","c","getCategory","getAuthor"],"mappings":"umBA4CO,IAAMA,EAAb,Y,QAEE,WAAYC,GACZ,aACE,cAAMA,IAAN,MAUFC,qBAXA,6BAWuB,WAAOC,GAAP,SAAAC,EAAA,sEACf,EAAKC,aAAaF,GADH,2CAXvB,sDAEE,EAAKG,MAAQ,CACXC,MAAO,GACPC,IAAK,EACLC,UAAU,EACVC,MAAO,IAETC,IAAcC,gBAAgB,EAAKV,sBARrC,E,EAHF,G,EAAA,G,6EAAA,2BAkBQG,aAlBR,6BAkBE,WAAmBK,GAAnB,eAAAN,EAAA,kEAIIS,KAAKC,SAAS,CACZJ,QACAD,UAAU,IAEA,MAATC,GAAiC,IAAhBA,EAAMK,OAR9B,gCAUsBC,YAAuBC,IAAOC,iBAAmB,4BAA6B,CAC5FC,QAAS,CAAC,OAAQ,WAAY,QAAS,WAAY,aAAc,OAAQ,SAAU,QAAS,aAAc,cAC1GT,MAAO,CACLU,YAAa,CACXV,MAAOA,EACPW,OAAQ,CAAC,OAAQ,QAAS,WAAY,WAAY,SAAU,UAGhEC,KAAML,IAAOM,0BACZ,CACDC,QAAS,CACP,eAAgB,mBAChBC,cAAe,SAASR,IAAOS,oBAtBzC,QAUUC,EAVV,SA0BgBA,EAAIC,MAAQD,EAAIC,KAAKA,MAE7Bf,KAAKC,SAAS,CACZP,MAAOoB,EAAIC,KAAKA,KAAKC,KAAI,SAAAC,GACvB,IAAIC,EAAID,EAAEX,QACV,MAAO,CACLa,YAAa,CACXC,MAAOF,EAAEE,MACTC,KAAMH,EAAEG,KACRC,WAAYJ,EAAEI,WACdC,MAAOL,EAAEK,MACTC,SAAUN,EAAEM,SACZC,KAAMP,EAAEO,KACRC,OAAQR,EAAEQ,OACVC,WAAYT,EAAES,YAEhBnB,OAAQ,CACNoB,SAAUV,EAAEU,SACZC,WAAYX,EAAEW,gBAIpBlC,IAAKmB,EAAIC,KAAKA,KAAKe,OACnBlC,UAAU,IAjDpB,gFA4DII,KAAKC,SAAS,CACZL,UAAU,IA7DhB,4EAlBF,wDAoFQmC,kBApFR,6BAoFE,8BAAAxC,EAAA,2DAEuByC,WAAXC,SAEJC,EAAIC,cACJtC,EAAQuC,mBAAmBF,EAAErC,OACjCG,KAAKR,aAAaK,IANtB,gDApFF,uDA8FEwC,qBAAA,WAEEvC,IAAcwC,kBAAkBtC,KAAKX,uBAhGzC,EAmGEkD,OAAA,WAEE,IAAIZ,EAAaa,YAAexC,KAAKZ,MAAMqD,KAAKd,WAAWe,MAAM1B,KAAI,SAAA2B,GAAC,OAAIA,EAAEC,SACxEC,EAAa7C,KAAKZ,MAAMqD,KAAKI,QAAQH,MAAM1B,KAAI,SAAA2B,GAAC,OAAIA,EAAEC,QAE1D,OACE,uBAAKE,UAAU,4BAEY,GAAvB9C,KAAKP,MAAMG,SACT,gCACE,gBAACmD,EAAA,EAAD,CAAa3B,MAAUpB,KAAKP,MAAME,IAAhB,wBAA2CK,KAAKP,MAAMI,MAAtD,MAClB,gBAACmD,EAAA,EAAD,CAAUtD,MAAOM,KAAKP,MAAMC,MAAOiC,WAAYA,EAAYkB,QAASA,KAGtE,gBAACE,EAAA,EAAD,CAAa3B,MAAK,yBAjH9B,GAAmC6B,a,iFCtB5B,IAAMC,EAAb,Y,QAEE,WAAY9D,GACZ,OACE,YAAMA,IADR,KAHF,O,EAAA,G,EAAA,G,6EAAA,YAMEmD,OAAA,WASE,OACE,kBAACY,EAAA,EAAD,CACAC,OAVyB,CACzBC,IAAK,SACLC,YAAa,mBACbC,KAAM,SACNnC,MAAO,iBACPoC,KAAM,CAAC,WAMPC,QACE,kBAACC,EAAA,EAAD,CAASC,SAAS,GAChB,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,QAIJ,kBAAC,EAAD,CAAerB,KAAMzC,KAAKZ,MAAMqD,SA1BtC,GAA4BQ,IAAMc,WAuCrBC,GAFEC,UALF,SAAC,GAAkC,IAAjCC,EAAiC,EAAjCA,YAAazB,EAAoB,EAApBA,KAAM0B,EAAc,EAAdA,SAChC,OACE,kBAAC,EAAD,CAAQ1B,KAAMA,EAAM0B,SAAUA,EAAUC,QAASF,KAK5B,e,uHC9ClB,IAAMG,EAAb,Y,QACE,WAAYjF,GAAO,OACjB,YAAMA,IADW,KADrB,O,EAAA,G,EAAA,G,6EAAA,YAKEmD,OAAA,WAAS,IACD+B,EAAStE,KAAKZ,MAAdkF,KACN,OACE,yBAAKxB,UAAU,gBACb,6BACE,kBAACyB,EAAA,EAAD,CAAYpD,YAAamD,EAAKnD,YAAaU,WAAYyC,EAAK9D,OAAOqB,WAAYH,OAAQ1B,KAAKZ,MAAMsC,OAAQC,WAAY3B,KAAKZ,MAAMuC,cAEnI,yBAAKmB,UAAU,gBACf,kBAAC,OAAD,CAAM0B,GAAI,IAAIF,EAAKnD,YAAYM,MAC7B,kBAAC,IAAD,CAAagD,QAASzE,KAAKZ,MAAMkF,KAAK9D,OAAOoB,SAAW5B,KAAKZ,MAAMkF,KAAK9D,OAAOoB,SAAW5B,KAAKZ,MAAMkF,KAAKI,SAA1G,SAdV,GAAiCzB,IAAMc,W,UCZhC,IAAMY,EAAb,Y,QAAA,yD,EAAA,G,EAAA,G,6EAAA,YAEEpC,OAAA,WAEE,OACE,yBAAKO,UAAU,2BAAf,oCALN,GAAkCG,IAAMc,W,kCCKjC,IAAMf,EAAb,Y,QAAA,yD,EAAA,G,EAAA,G,6EAAA,YAEET,OAAA,WACA,WACE,OACE,6BAEEvC,KAAKZ,MAAMM,MAAMsB,KAAI,SAAC4D,EAAEC,GAAH,OACnB,yBAAKC,IAAKD,GACR,kBAAC,EAAD,CAAaP,KAAMM,EAAGjD,WAAYiD,EAAEzD,YAAYQ,WAAWX,KAAI,SAAA+D,GAAC,OAAIC,YAAYD,EAAG,EAAK3F,MAAMuC,eAAcD,OAAQuD,YAAUL,EAAEzD,YAAYO,OAAQ,EAAKtC,MAAMyD,eAKxI,GAA3B7C,KAAKZ,MAAMM,MAAMoC,OAAc,kBAAC,EAAD,MAAkB,KAdzD,GAA8BmB,IAAMc","file":"component---src-pagecomponents-search-page-search-page-tsx-9a442b055cf1dad461e8.js","sourcesContent":["import * as React from \"react\";\r\nimport { postData, nestCategories, getQueryObject } from '../../tool';\r\nimport { config } from \"../../config\";\r\nimport { PostList } from \"../Post/PostList\";\r\nimport { ICategory, IAuthor, IQueryArrayResult, IPost, IPostSummary } from '../../interfaces';\r\nimport { CategoryBar } from \"../CategoryBar/CategoryBar\";\r\nimport { SearchService } from '../../services/SearchService';\r\n\r\ninterface Props\r\n{\r\n  data: {\r\n    categories: IQueryArrayResult<ICategory>\r\n    authors: IQueryArrayResult<IAuthor>\r\n  }\r\n}\r\n\r\ninterface IQueryResult\r\n{\r\n  hits: {\r\n    total: {\r\n      value: number;\r\n      relation: string;\r\n    }\r\n    max_score: number;\r\n    hits: IHit[];\r\n  }\r\n}\r\n\r\ninterface IHit\r\n{\r\n  _source: {\r\n    title: string;\r\n    date: string;\r\n    updatedate: string;\r\n    image: string;\r\n    author: string;\r\n    subtitle: string;\r\n    abstract: string;\r\n    slug: string;\r\n    commentCnt: number;\r\n    categories: string[];\r\n  }\r\n}\r\n\r\nexport class SearchResults extends React.Component<Props, { posts: IPostSummary[], cnt: number, finished: boolean, query: string}>\r\n{\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n    this.state = {\r\n      posts: [],\r\n      cnt: 0,\r\n      finished: false,\r\n      query: \"\"\r\n    };\r\n    SearchService.registerHandler(this.searchChangedHandler)\r\n  }\r\n  \r\n  searchChangedHandler = async (q) => {\r\n    await this.updateSearch(q);\r\n  }\r\n  \r\n  async updateSearch(query: string)\r\n  {\r\n    try \r\n    {\r\n      this.setState({\r\n        query,\r\n        finished: false\r\n      });\r\n      if(query != null && query.trim() != \"\")\r\n      {\r\n        let res = await postData<IQueryResult>(config.elasticSearchUri + \"/docs/_search?pretty=true\", {\r\n          _source: [\"slug\", \"abstract\", \"title\", \"subtitle\", \"updatedate\", \"date\", \"author\", \"image\", \"categories\", \"commentCnt\"],\r\n          query: {\r\n            multi_match: {\r\n              query: query,\r\n              fields: [\"tags\", \"title\", \"subtitle\", \"abstract\", \"author\", \"text\"]\r\n            }\r\n          },\r\n          size: config.elasticSearchResultLimit\r\n        }, {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: \"Basic \"+config.elsaticBasicAuth\r\n          }\r\n        });\r\n        \r\n        if(res && res.hits && res.hits.hits)\r\n        {\r\n          this.setState({\r\n            posts: res.hits.hits.map(s => {\r\n              let r = s._source;\r\n              return {\r\n                frontmatter: {\r\n                  title: r.title,\r\n                  date: r.date,\r\n                  updatedate: r.updatedate,\r\n                  image: r.image,\r\n                  subtitle: r.subtitle,\r\n                  slug: r.slug,\r\n                  author: r.author,\r\n                  categories: r.categories,\r\n                },\r\n                fields: {\r\n                  abstract: r.abstract,\r\n                  commentCnt: r.commentCnt\r\n                }\r\n              }\r\n            }),\r\n            cnt: res.hits.hits.length,\r\n            finished: true\r\n          });\r\n        }\r\n      }\r\n    }\r\n    catch(error)\r\n    {\r\n      \r\n    }\r\n    finally\r\n    {\r\n      this.setState({\r\n        finished: true\r\n      })\r\n    }\r\n  }\r\n  \r\n  async componentDidMount()\r\n  {\r\n    if(typeof window !== undefined)\r\n    {\r\n      let o = getQueryObject();\r\n      let query = decodeURIComponent(o.query);\r\n      this.updateSearch(query);\r\n    }\r\n  }\r\n  \r\n  componentWillUnmount()\r\n  {\r\n    SearchService.unregisterHandler(this.searchChangedHandler);\r\n  }\r\n  \r\n  render()\r\n  {\r\n    let categories = nestCategories(this.props.data.categories.edges.map(e => e.node));\r\n    let authors    = this.props.data.authors.edges.map(e => e.node);\r\n    \r\n    return (\r\n      <div className=\"search-results-container\">\r\n        {\r\n          this.state.finished == true ? (\r\n            <>\r\n              <CategoryBar title={`${this.state.cnt} Suchergebnisse fÃ¼r '${this.state.query}'`}/>\r\n              <PostList posts={this.state.posts} categories={categories} authors={authors}></PostList>\r\n            </>\r\n          ) : (\r\n            <CategoryBar title={`Lade Ergebnisse...`}/>\r\n          )\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import { graphql } from \"gatsby\";\r\nimport React from \"react\";\r\nimport { IQueryArrayResult, ICategory, IAuthor, IGatsbyLocation } from '../../interfaces';\r\nimport { ContentLayoutWithSidebar } from '../../components/Layout/ContentLayout';\r\nimport { SideBar } from \"../../components/SideBar/SideBar\";\r\nimport { SideBarQuickstart } from \"../../components/SideBar/SideBarQuickstart\";\r\nimport { SideBarHelp } from \"../../components/SideBar/SideBarHelp\";\r\nimport SideBarCategories from \"../../components/SideBar/SideBarCategories\";\r\nimport { IHeaderProps } from \"../../components/Layout/Header\";\r\nimport { SearchResults } from '../../components/Search/SearchResults';\r\n\r\ninterface IQueryResult\r\n{\r\n  data: {\r\n    categories: IQueryArrayResult<ICategory>\r\n    authors: IQueryArrayResult<IAuthor>\r\n  };\r\n  context: any;\r\n  location: IGatsbyLocation;\r\n}\r\n\r\n\r\nexport class Search extends React.Component<IQueryResult>\r\n{\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n  }\r\n  render(){\r\n    let header: IHeaderProps = {\r\n      url: \"search\",\r\n      description: `Sucherergebnisse`,\r\n      type: \"object\",\r\n      title: `Suchergebnisse`,\r\n      tags: [\"search\"]\r\n    }\r\n    let query = \"power\";\r\n    return (\r\n      <ContentLayoutWithSidebar\r\n      header={header} \r\n      sidebar={(\r\n        <SideBar isFixed={true}>\r\n          <SideBarQuickstart></SideBarQuickstart>\r\n          <SideBarHelp></SideBarHelp>\r\n          <SideBarCategories></SideBarCategories>\r\n        </SideBar>\r\n      )} \r\n      >\r\n      <SearchResults data={this.props.data}></SearchResults>\r\n      </ContentLayoutWithSidebar>\r\n    )\r\n  }\r\n}\r\n\r\nconst Page = ({pageContext, data, location}) => {\r\n  return (\r\n    <Search data={data} location={location} context={pageContext}></Search>\r\n  );\r\n};\r\nexport default Page;\r\n\r\nexport const pageQuery = graphql`\r\n{\r\n    ...categories\r\n    ...authorsMarkdown\r\n}\r\n`;\r\n","import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport \"./Post.sass\";\r\nimport { PostHeader } from './PostHeader';\r\nimport { HTMLContent } from \"../Content/Content\";\r\nimport { INestedCategory } from \"../../tool\";\r\nimport { IPostSummary, IAuthor } from \"../../interfaces\";\r\n\r\ninterface Props\r\n{\r\n  post: IPostSummary;\r\n  categories: INestedCategory[];\r\n  author: IAuthor;\r\n}\r\n\r\nexport class PostPreview extends React.Component<Props> {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    let { post } = this.props;\r\n    return (\r\n      <div className=\"post-preview\">\r\n        <div>\r\n          <PostHeader frontmatter={post.frontmatter} commentCnt={post.fields.commentCnt} author={this.props.author} categories={this.props.categories}/>\r\n        </div>\r\n        <div className=\"post-content\">\r\n        <Link to={\"/\"+post.frontmatter.slug}>\r\n          <HTMLContent content={this.props.post.fields.abstract ? this.props.post.fields.abstract : this.props.post.excerpt}> </HTMLContent>\r\n        </Link>\r\n          {/* <div>\r\n            <Link to={post.frontmatter.slug}><span style={{verticalAlign: \"middle\"}}><FaLongArrowAltRight/></span> Mehr</Link>\r\n          </div> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\n","import React from \"react\";\r\nimport \"./Content.sass\"\r\n\r\nexport class EmptyContent extends React.Component\r\n{\r\n  render()\r\n  {\r\n    return (\r\n      <div className=\"empty-content-container\">Hier gibt es noch keine Inhalte</div>\r\n    )\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { IAuthor, IPostSummary } from '../../interfaces';\r\nimport { getCategory, getAuthor, INestedCategory } from \"../../tool\";\r\nimport { PostPreview } from \"./PostPreview\";\r\nimport { EmptyContent } from \"../Content/EmptyContent\";\r\n\r\n\r\n\r\nexport class PostList extends React.Component<{posts: IPostSummary[], categories: INestedCategory[], authors: IAuthor[]}>\r\n{\r\n  render() \r\n  {\r\n    return (\r\n      <div>\r\n      {\r\n        this.props.posts.map((p,i) => (\r\n          <div key={i}>\r\n            <PostPreview post={p} categories={p.frontmatter.categories.map(c => getCategory(c, this.props.categories))} author={getAuthor(p.frontmatter.author, this.props.authors)}></PostPreview>\r\n          </div>\r\n        ))\r\n      }\r\n      {\r\n        this.props.posts.length == 0 ? <EmptyContent/> : \"\"\r\n      }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"],"sourceRoot":""}